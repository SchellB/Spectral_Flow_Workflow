library(CATALYST)
library(CytoNorm)
library(SingleCellExperiment)
library(uwot)
library(knitr)
library(xlsx)
fcs.dir<- "C:/Users/beren/Documents/CMF-pipeline/FCS_NKact"
fcs_data <- read.flowSet(path=fcs.dir, pattern="*.fcs", transformation = FALSE, truncate_max_range = FALSE) #fcs_data will be a FlowSet object
fcs_colname <- colnames(fcs_data)
panel <- read.csv2("C:/Users/beren/Documents/CMF-pipeline/Data/panelNKact.csv", row.names = 1)
kable(panel)
markerstotransform <- panel$fcs_colname[,panel$marker_class=="type"]
markerstotransform <- panel$fcs_colname[panel$marker_class=="type"]
markerstotransform <- subset(panel$fcs_colname, subset=panel$marker_class=="type")
markerstotransform <- filter(panel$marker_class=="type") %>% select(panel$channel)
library(dplyr)
markerstotransform <- filter(panel$marker_class=="type") %>% select(panel$channel)
markerstotransform <- panel %>% filter(marker_class=="type") %>% select(channel)
View(markerstotransform)
Downsampling_FlowSet <- function(x, samplesize , replace=TRUE, prob=NULL){
if(missing(samplesize))
samplesize <- min(flowCore::fsApply(x,nrow))
flowCore::fsApply(x, function(ff){
i <- sample(nrow(ff), size = samplesize, replace=replace, prob)
ff[i,]
})
}
fcs_data_small <- Downsampling_FlowSet(x=fcs_data, samplesize = 2000) #samplesize is the number of cells included, you can include more cells.
cofactors <- estParamFlowVS(fcs_data_small, channels=markerstotransform)
library(flowCore)
library(flowViz)
library(flowVS)
BiocManager::install("flowVS")
library(flowVS)
library(flowAI)
BiocManager::install("flowAI")
BiocManager::install("flowViz")
BiocManager::install("flowAI")
BiocManager::install("PeacoQC")
BiocManager::install("SingleCellExperiment")
devtools::install_github('saeyslab/CytoNorm')
install.packages("uwot")
install.packages("uwot")
install.packages("knitr")
install.packages("xlsx")
library(flowCore)
library(flowViz)
library(flowVS)
library(flowAI)
library(PeacoQC)
library(CATALYST)
library(CytoNorm)
library(SingleCellExperiment)
library(uwot)
library(knitr)
library(xlsx)
cofactors <- estParamFlowVS(fcs_data_small, channels=markerstotransform)
markerstotransform <- as.character(markerstotransform)
markerstotransform <- panel$channel[panel$marker_class=="type"]
markerstotransform
View(panel)
cofactors <- estParamFlowVS(fcs_data_small, channels=markerstotransform)
cofactordata <- data.frame(markerstotransform, cofactors)
write.csv(x=cofactordata, file="cofactordata.csv") #csv file
getwd()
write.csv2(x=cofactordata, file="cofactordata.csv") #csv file
?write.csv2
write.csv2(x=cofactordata, file="cofactordata.csv", row.names=F) #csv file
write.csv2(x=cofactordata, file="cofactordata.csv", row.names=F) #csv file
fcs_transform <- transFlowVS(fcs_data, channels = markerstotransform, cofactors)
filenames <- sampleNames(fcs_data)
sampleNames(fcs_transform) <- filenames
densityplot(~`FJComp-BB515-A`, fcs_data[[1]]) #density plot before transformation, you can replace `FJComp-BB515-A` by . to view all markers.
densityplot(~`FJComp-BB515-A`, fcs_transform[[1]]) # density plot after transformation
densityplot(~., fcs_data[[1]]) #density plot before transformation, you can replace `FJComp-BB515-A` by . to view all markers.
dev.off()
pdf(file="Output/cofactorTransformPlots.pdf")
densityplot(~., fcs_data[[1]]) #density plot before transformation, you can replace `FJComp-BB515-A` by . to view all markers.
densityplot(~., fcs_transform[[1]]) # density plot after transformation
dev.off()
fcs_transform <- flow_auto_qc(fcs_transform)
memory.size()
memory.limit()
memory.limit(size=56000)
fcs_transform <- flow_auto_qc(fcs_transform)
fcs_transform_small <- transFlowVS(fcs_data_small, channels = markerstotransform, cofactors)
filenames <- sampleNames(fcs_data_small)
sampleNames(fcs_transform_small) <- filenames
fcs_transform_small <- flow_auto_qc(fcs_transform_small)
fcs_transform <- flow_auto_qc(fcs_transform, remove_from = "FS_FM")
memory.limit()
fcs_transform_small <- flow_auto_qc(fcs_transform_small, remove_from = "FS_FM")
?flow_auto_qc
save(fsc_transform, fsc_transform_small, file="fscTransformed.Rdata")
save(fcs_transform, fcs_transform_small, file="fcsTransformed.Rdata")
load("fcsTransformed.Rdata")
fcs_transform_small <- flow_auto_qc(fcs_transform_small)
memory.limit(size=560000)
fcs_transform_small <- flow_auto_qc(fcs_transform_small)
memory.limit(size=560000000000)
fcs_transform_small <- flow_auto_qc(fcs_transform_small)
gc()
fcs.dir<- "C:/Users/beren/Documents/CMF-pipeline/FCS_NKact"
files <- list.files(fcs.dir, pattern = "fcs$")
fsom <- prepareFlowSOM(fcs_transform, colsToUse = markerstotransform, transformList = NULL, FlowSOM.params = list(xdim=10,ydim=10, nClus=20, scale=FALSE))
outdir <- file.path(getwd(), "Transformed FCS files")
filenames <- paste("tf",fcs_data@phenoData@data$name)
fcs_data <- read.flowSet(path=fcs.dir, pattern="*.fcs", transformation = FALSE, truncate_max_range = FALSE) #fcs_data will be a FlowSet object
panel <- read.csv2("C:/Users/beren/Documents/CMF-pipeline/Data/panelNKact.csv", row.names = 1)
filenames <- paste("tf",fcs_data@phenoData@data$name)
write.flowSet(fcs_transform, outdir = outdir, filename = filenames) #create a new directory with transformed FCS files
files <- list.files(fcs.dir, pattern = "fcs$")
train_files <- file.path(getwd(),"Transformed FCS files", list.files(fcs.dir, pattern="REU271"))
train_files <- file.path(getwd(),"Transformed FCS files", list.files(fcs.dir, pattern="fcs$"))
fsom <- prepareFlowSOM(train_files, colsToUse = markerstotransform, transformList = NULL, FlowSOM.params = list(xdim=10,ydim=10, nClus=20, scale=FALSE))
?list.files
?write.flowSet
train_files <- file.path(getwd(),"Transformed FCS files", list.files(fcs.dir, pattern="fcs$"))
fsom <- prepareFlowSOM(train_files, colsToUse = markerstotransform, transformList = NULL, FlowSOM.params = list(xdim=10,ydim=10, nClus=20, scale=FALSE))
isFCSfile("C:/Users/beren/Documents/Spectral_Flow_Workflow/Transformed FCS files/HD-NK1 + HD-MSC4 AMO +Molm 1%_HD-NEWP57P6_NK98198.fcs")
train_files <- file.path(getwd(),"Transformed FCS files", list.files(pattern="fcs$"))
fcs.dir<- file.path(getwd(), "Transformed FCS files")
files <- list.files(fcs.dir, pattern = "fcs$")
train_files <- file.path(getwd(),"Transformed FCS files", list.files(fcs.dir, pattern="REU271"))
validation_files <- file.path(getwd(), "Transformed FCS files", list.files(fcs.dir, pattern="REU272"))
fsom <- prepareFlowSOM(train_files, colsToUse = markerstotransform, transformList = NULL, FlowSOM.params = list(xdim=10,ydim=10, nClus=20, scale=FALSE))
markerstotransform <- panel$channel[panel$marker_class=="type"]
fsom <- prepareFlowSOM(train_files, colsToUse = markerstotransform, transformList = NULL, FlowSOM.params = list(xdim=10,ydim=10, nClus=20, scale=FALSE))
train_files <- file.path(getwd(),"Transformed FCS files", list.files(fcs.dir, pattern="NK98198"))
validation_files <- file.path(getwd(), "Transformed FCS files", list.files(fcs.dir, pattern="NK506369"))
validation_files <- file.path(getwd(), "Transformed FCS files", list.files(fcs.dir, pattern="NK 506369"))
fsom <- prepareFlowSOM(train_files, colsToUse = markerstotransform, transformList = NULL, FlowSOM.params = list(xdim=10,ydim=10, nClus=20, scale=FALSE))
cvs <- testCV(fsom,cluster_values = c(5,10,15))
md <-read.xlsx(file="C:/Users/beren/Documents/CMF-pipeline/Data/MetadataNKact.xlsx", header=TRUE)
md <-read_excel("C:/Users/beren/Documents/CMF-pipeline/Data/metadataNKact.xlsx")
library(readxl)
md <-read_excel("C:/Users/beren/Documents/CMF-pipeline/Data/metadataNKact.xlsx")
View(md)
kable(md)
file_names <- list.files(fcs.dir)
file_name <- fsApply(fcs_transform, identifier)
file_name == file_names #check if the order of files in the directory and order of files in FlowSet object are matching
file_names <- list.files(fcs.dir, pattern = "fcs$")
file_name <- fsApply(fcs_transform, identifier)
file_name == file_names #check if the order of files in the directory and order of files in FlowSet object are matching
md <- data.frame(file_name, md, row.names=NULL)
file_name %in% file_names #check if the order of files in the directory and order of files in FlowSet object are matching
sort(file_names)
sort(file_name)
file_name == file_names #check if the order of files in the directory and order of files in FlowSet object are matching
md <- data.frame(file_name, md, row.names=NULL)
View(md)
md <-read_excel("C:/Users/beren/Documents/CMF-pipeline/Data/metadataNKact.xlsx")
md <- data.frame(file_name, md, row.names=NULL)
View(md)
md <-read_excel("C:/Users/beren/Documents/CMF-pipeline/Data/metadataNKact.xlsx")
fcs.dir<- file.path(getwd(), "Transformed FCS files")
file_names <- list.files(fcs.dir, pattern = "fcs$")
sort(file_names)
file_name <- fsApply(fcs_transform, identifier)
sort(file_name)
file_name == file_names #check if the order of files in the directory and order of files in FlowSet object are matching
md <- data.frame(file_name, md, row.names=NULL)
View(md)
md <- data.frame(sort(file_name), md, row.names=NULL)
md <-read_excel("C:/Users/beren/Documents/CMF-pipeline/Data/metadataNKact.xlsx")
View(md)
md <-read_excel("C:/Users/beren/Documents/CMF-pipeline/Data/metadataNKact.xlsx")
fcs.dir<- file.path(getwd(), "Transformed FCS files")
file_names <- list.files(fcs.dir, pattern = "fcs$")
sort(file_names)
file_name <- fsApply(fcs_transform, identifier)
sort(file_name)
file_name == file_names #check if the order of files in the directory and order of files in FlowSet object are matching
md <- data.frame(sort(file_name), md, row.names=NULL)
View(md)
labels <- c("B", "C", "D", "E", "F", "A")
model <- CytoNorm.train(files = train_files,
labels = labels,
channels = markerstotransform,
transformList = NULL,
FlowSOM.params = list(nCells = 6000,
xdim = 10,
ydim = 10,
nClus = 5,
scale = FALSE),
normMethod.train = QuantileNorm.train,
normParams = list(nQ = 101,
goal = "mean"),
seed = 1,
verbose = TRUE)
labels <- c(seq(1:47))
model <- CytoNorm.train(files = train_files,
labels = labels,
channels = markerstotransform,
transformList = NULL,
FlowSOM.params = list(nCells = 6000,
xdim = 10,
ydim = 10,
nClus = 5,
scale = FALSE),
normMethod.train = QuantileNorm.train,
normParams = list(nQ = 101,
goal = "mean"),
seed = 1,
verbose = TRUE)
labels <- c(seq(A:L))
model <- CytoNorm.train(files = train_files,
labels = labels,
channels = markerstotransform,
transformList = NULL,
FlowSOM.params = list(nCells = 6000,
xdim = 10,
ydim = 10,
nClus = 5,
scale = FALSE),
normMethod.train = QuantileNorm.train,
normParams = list(nQ = 101,
goal = "mean"),
seed = 1,
verbose = TRUE)
labels <- c(seq(1:12)) # must be of same length than tranfiles
model <- CytoNorm.train(files = train_files,
labels = labels,
channels = markerstotransform,
transformList = NULL,
FlowSOM.params = list(nCells = 6000,
xdim = 10,
ydim = 10,
nClus = 5,
scale = FALSE),
normMethod.train = QuantileNorm.train,
normParams = list(nQ = 101,
goal = "mean"),
seed = 1,
verbose = TRUE)
View(model)
CytoNorm.normalize(model = model,
files = validation_files,
labels = labels,
transformList = NULL,
transformList.reverse = NULL,
normMethod.normalize = QuantileNorm.normalize,
outputDir = "Normalized",
prefix = "Norm_",
clean = TRUE,
verbose = TRUE)
labels <- c(seq(1:20)) # must be of same length than train files & then validation files
CytoNorm.normalize(model = model,
files = validation_files,
labels = labels,
transformList = NULL,
transformList.reverse = NULL,
normMethod.normalize = QuantileNorm.normalize,
outputDir = "Normalized",
prefix = "Norm_",
clean = TRUE,
verbose = TRUE)
fcs.dir<- file.path(getwd(), "Normalized")
fcs_norm <- read.flowSet(path=fcs.dir, pattern="*.fcs", transformation = FALSE, truncate_max_range = FALSE)
densityplot(~`FJComp-BUV496-A`, fcs_transform[13])#before normalization
densityplot(~`FJComp-BB515-A`, fcs_transform[13])#before normalization
densityplot(~`FJComp-BB515-A`, fcs_norm[3])#after normalization
densityplot(~., fcs_norm[3])#after normalization
View(fcs_norm)
fcs_norm@phenoData@data[["name"]]
densityplot(~., fcs_norm[13])#after normalization
densityplot(~'FJComp-BB515-A', fcs_norm[13])#after normalization
fcs_norm@frames[["C__Users_beren_Documents_Spectral_Flow_Workflow_Transformed FCS files_tf NK + HD-MSC MALA44P5 +K562 30%_HD2 + HDNK 506369.fcs_fsom1.fcs"]]@parameters@data[["name"]][["$P10N"]]
densityplot(~"FJComp-BB515-A", fcs_norm[13])#after normalization
densityplot(~., fcs_norm[13])#after normalization
fcs_norm <- read.flowSet(path=fcs.dir, pattern="$.fcs", transformation = FALSE, truncate_max_range = FALSE)
fcs_norm <- read.flowSet(path=fcs.dir, pattern="*.fcs", transformation = FALSE, truncate_max_range = FALSE)
fcs_train <- Downsampling_FlowSet(fcs_train, samplesize =20000) # you can still downsample your training set if needed, but you can also include all or more cells
Downsampling_FlowSet <- function(x, samplesize , replace=TRUE, prob=NULL){
if(missing(samplesize))
samplesize <- min(flowCore::fsApply(x,nrow))
flowCore::fsApply(x, function(ff){
i <- sample(nrow(ff), size = samplesize, replace=replace, prob)
ff[i,]
})
}
Subsampling_FlowSet <- function(x, fraction, md){
b <- round(fraction*length(x), digits=0)
listq <- sample(x=length(x), b, replace=FALSE)
listq <- sort(listq)
fcs_train<-x[c(listq)]
md_train <- md[c(listq),]
fcs_train <<- fcs_train
md_train <<- md_train
listy <- 1:length(x)
listz <- subset(listy, !(listy %in% listq))
listz <- sort(listz)
fcs_test <- x[c(listz)]
md_test <- md[c(listz),]
fcs_test <<- fcs_test
md_test <<- md_test
}
fcs_train <- Downsampling_FlowSet(fcs_train, samplesize =20000) # you can still downsample your training set if needed, but you can also include all or more cells
Subsampling_FlowSet(fcs_transform,0.25, md=md) #test and train set are created
fcs_train <- Downsampling_FlowSet(fcs_train, samplesize =20000) # you can still downsample your training set if needed, but you can also include all or more cells
sce_train <- prepData(fcs_train, md=md_train, panel= panel, FACS = TRUE, transform=FALSE, md_cols =list(file="file_name", id="Sample_ID", factors=c("Group_ID", "batch")))
fcs_test <- Downsampling_FlowSet(fcs_test, samplesize =20000)
sce_test <-prepData(fcs_test, md=md_test, panel= panel, FACS = TRUE, transform=FALSE, md_cols =list(file="file_name", id="Sample_ID", factors=c("Group_ID", "batch")))
assayNames(sce_test)[1] <- "exprs"
names(panel)
"marker_class" %in% names(panel)
validation_files <- file.path(getwd(), "Transformed FCS files", list.files(fcs.dir, pattern="fcs$"))
fsom <- prepareFlowSOM(train_files, colsToUse = markerstotransform, transformList = NULL, FlowSOM.params = list(xdim=10,ydim=10, nClus=20, scale=FALSE))
cvs <- testCV(fsom,cluster_values = c(5,10,15))
validation_files <- file.path(getwd(), "Transformed FCS files", list.files(fcs.dir, pattern="NK 506369"))
train_files <- file.path(fcs.dir, list.files(fcs.dir, pattern="NK98198"))
fcs.dir<- file.path(getwd(), "Transformed FCS files")
files <- list.files(fcs.dir, pattern = "fcs$")
train_files <- file.path(fcs.dir, list.files(fcs.dir, pattern="NK98198"))
train_files <- list.files(fcs.dir, pattern="NK98198")
validation_files <- list.files(fcs.dir, pattern="NK 506369")
fsom <- prepareFlowSOM(train_files, colsToUse = markerstotransform, transformList = NULL, FlowSOM.params = list(xdim=10,ydim=10, nClus=20, scale=FALSE))
isFCSfile(tf HD-NK1 + HD-MSC4 AMO +Molm 1%_HD-NEWP57P6_NK98198.fcs)
isFCSfile("tf HD-NK1 + HD-MSC4 AMO +Molm 1%_HD-NEWP57P6_NK98198.fcs")
train_files <- file.path(fcs.dir, list.files(fcs.dir, pattern="NK98198"))
validation_files <- file.path(getwd(), "Transformed FCS files", list.files(fcs.dir, pattern="NK 506369"))
fsom <- prepareFlowSOM(train_files, colsToUse = markerstotransform, transformList = NULL, FlowSOM.params = list(xdim=10,ydim=10, nClus=20, scale=FALSE))
cvs <- testCV(fsom,cluster_values = c(5,10,15))
CytoNorm.normalize(model = model,
files = files,
labels = labels,
transformList = NULL,
transformList.reverse = NULL,
normMethod.normalize = QuantileNorm.normalize,
outputDir = "Normalized",
prefix = "Norm_",
clean = TRUE,
verbose = TRUE)
labels <- c(seq(1:47)) # must be of same length than train files & then validation files
CytoNorm.normalize(model = model,
files = files,
labels = labels,
transformList = NULL,
transformList.reverse = NULL,
normMethod.normalize = QuantileNorm.normalize,
outputDir = "Normalized",
prefix = "Norm_",
clean = TRUE,
verbose = TRUE)
validation_files <- file.path(getwd(), "Transformed FCS files", list.files(fcs.dir, pattern="fcs$"))
fsom <- prepareFlowSOM(train_files, colsToUse = markerstotransform, transformList = NULL, FlowSOM.params = list(xdim=10,ydim=10, nClus=20, scale=FALSE))
files <- list.files(fcs.dir, pattern = "fcs$")
train_files <- file.path(fcs.dir, list.files(fcs.dir, pattern="NK98198"))
validation_files <- file.path(getwd(), "Transformed FCS files", list.files(fcs.dir, pattern="fcs$"))
fsom <- prepareFlowSOM(train_files, colsToUse = markerstotransform, transformList = NULL, FlowSOM.params = list(xdim=10,ydim=10, nClus=20, scale=FALSE))
cvs <- testCV(fsom,cluster_values = c(5,10,15))
md <-read_excel("C:/Users/beren/Documents/CMF-pipeline/Data/metadataNKact.xlsx")
library(read)
md <-read_excel("C:/Users/beren/Documents/CMF-pipeline/Data/metadataNKact.xlsx")
```{r batch effect correction-4, echo=FALSE}
kable(md)
fcs.dir<- file.path(getwd(), "Transformed FCS files")
file_names <- list.files(fcs.dir, pattern = "fcs$")
sort(file_names)
file_name <- fsApply(fcs_transform, identifier)
sort(file_name)
file_name == file_names #check if the order of files in the directory and order of files in FlowSet object are matching
md <- data.frame(sort(file_name), md, row.names=NULL)
labels <- c(seq(1:47)) # must be of same length than train files & then validation files
CytoNorm.normalize(model = model,
files = files,
labels = labels,
transformList = NULL,
transformList.reverse = NULL,
normMethod.normalize = QuantileNorm.normalize,
outputDir = "Normalized",
prefix = "Norm_",
clean = TRUE,
verbose = TRUE)
CytoNorm.normalize(model = model,
files = validation_files,
labels = labels,
transformList = NULL,
transformList.reverse = NULL,
normMethod.normalize = QuantileNorm.normalize,
outputDir = "Normalized",
prefix = "Norm_",
clean = TRUE,
verbose = TRUE)
fcs.dir<- file.path(getwd(), "Normalized")
fcs_norm <- read.flowSet(path=fcs.dir, pattern="*Norm_tf", transformation = FALSE, truncate_max_range = FALSE)
save(fcs_norm, file="fcsTransformedNorm.Rdata")
densityplot(~., fcs_transform[13])#before normalization
densityplot(~., fcs_norm[13])#after normalization
densityplot(~., fcs_transform[1])#before normalization
?densityplot
densityplot(~"FJComp-BUV737-A", fcs_transform[1])#before normalization
View(fcs_transform)
View(fcs_transform@phenoData@data)
fcs_transform@frames[["HD-NK1 + HD-MSC4 AMO +Molm 1%_HD-NEWP57P6_NK98198.fcs"]]@parameters@data[["desc"]]
fcs_transform@frames[["HD-NK1 + HD-MSC4 AMO +Molm 1%_HD-NEWP57P6_NK98198.fcs"]]@parameters@data[["name"]][["$P7N"]]
densityplot(~"FJComp-APC-Vio 770-A", fcs_transform[1])#before normalization
densityplot(~"FJComp-APC-Vio 770-A", fcs_transform[10])#before normalization
fcs_norm@frames[["C__Users_beren_Documents_Spectral_Flow_Workflow_Transformed FCS files_tf NK + HD-MSC MALA44P5 +K562 30%_HD2 + HDNK 506369.fcs_fsom1.fcs"]]@parameters@varMetadata[["labelDescription"]]
View(fcs_norm@phenoData@varMetadata)
fcs_norm@phenoData@data[["name"]]
fcs_norm@phenoData@dimLabels
fcs_norm@phenoData@.__classVersion__
fcs_norm@phenoData
markers <- panel$antigen
chnls <- panel$channel
names(markers) <- chnls
markernames(fcs_data) <- markers
markernames(fcs_data)
Downsampling_FlowSet <- function(x, samplesize , replace=TRUE, prob=NULL){
if(missing(samplesize))
samplesize <- min(flowCore::fsApply(x,nrow))
flowCore::fsApply(x, function(ff){
i <- sample(nrow(ff), size = samplesize, replace=replace, prob)
ff[i,]
})
}
fcs_data_small <- Downsampling_FlowSet(x=fcs_data, samplesize = 2000) #samplesize is the number of cells included, you can include more cells.
fcs_transform <- transFlowVS(fcs_data, channels = markerstotransform, cofactors)
cofactordata <- read.csv2("Output/cofactordata.csv")
View(cofactordata)
fcs_transform <- transFlowVS(fcs_data, channels = cofactordata$markerstotransform, cofactordata$cofactors)
filenames <- sampleNames(fcs_data)
sampleNames(fcs_transform) <- filenames
fcs_transform_small <- transFlowVS(fcs_data_small, channels = markerstotransform, cofactors)
filenames <- sampleNames(fcs_data_small)
sampleNames(fcs_transform_small) <- filenames
save(fcs_transform, fcs_transform_small, file="fcsTransformed.Rdata")
View(fcs_transform)
fcs_transform@frames[["HD-NK1 + HD-MSC4 AMO +Molm 1%_HD-NEWP57P6_NK98198.fcs"]]@parameters@data[["desc"]]
View(fcs_data)
fcs_data@frames[["HD-NK1 + HD-MSC4 AMO +Molm 1%_HD-NEWP57P6_NK98198.fcs"]]@parameters@data[["desc"]]
fcs_data@frames[["HD-NK1 + HD-MSC4 AMO +Molm 1%_HD-NEWP57P6_NK98198.fcs"]]@parameters@data[["name"]]
markernames(fcs_data)
markernames(fcs_transform)
markernames(fcs_transform) <- markers
markernames(fcs_transform)
fcs_transform <- flow_auto_qc(fcs_transform)
fcs_transform <- flow_auto_qc(fcs_transform, remove_from = "FS_FM")
#
fcs.exp <- fcs_data@exprs
fcs.files <- list.files(path="C:/Users/beren/Documents/Spectral_Flow_Workflow/Normalized", pattern = '.fcs$', full = TRUE)
fcs.data <- runExprsMerge(fcs.files, comp = FALSE, transformMethod = "none")
# Read fcs files
library(CytoTree)
fcs.data <- runExprsMerge(fcs.files, comp = FALSE, transformMethod = "none")
## preparing panel
panel <- read.csv2(paste0(wd,"Data/panelNKact.csv"), row.names = 1)
markers <- panel$antigen
names(markers) <- panel$chnls
# Refine colnames of fcs data
colnames(fcs.data)[match(panel$channel, colnames(fcs.data))] = recol
?runExprsMerge
View(fcs.data)
# Refine colnames of fcs data
colnames(fcs.data)[match(panel$channel, colnames(fcs.data))] = panel
markers <- colnames(fcs.data)
# changing colnames metadata
metadataNKact <- read_excel(paste0(wd,"/Data/metadataNKact.xlsx"))
# changing colnames metadata
metadataNKact <- read_excel("Data/metadataNKact.xlsx"))
# changing colnames metadata
metadataNKact <- read_excel("C:/Users/beren/Documents/CMF-pipeline/Data/metadataNKact.xlsx")
colnames(metadataNKact) <- c("file_name","cell","patient_id","stage","NK_id")
cyt <- createCYT(raw.data = fcs.data, meta.data = metadataNKact, normalization.method = "log")
?runExprsMerge
fcs.dir <- file.path(getwd(), "Transformed FCS files")
files <- list.files(fcs.dir, pattern = "fcs$")
fcs.files <- list.files(fcs.dir, pattern = "fcs$")
fcs.data <- runExprsMerge(fcs.files, comp = FALSE, transformMethod = "none")
fcs.files <- file.path(getwd(), "Transformed FCS files", list.files(fcs.dir, pattern="fcs$"))
fcs.data <- runExprsMerge(fcs.files, comp = FALSE, transformMethod = "none")
View(fcs.data)
# transform into expression matrix
fcs.exp <- fcs.data@exprs
# transform into expression matrix
fcs.exp <- fcs_transform@exprs
View(fcs_transform)
fcs_transform@frames[["HD-NK1 + HD-MSC4 AMO +Molm 1%_HD-NEWP57P6_NK98198.fcs"]]
# transform into expression matrix
fcs.exp <- fcs_transform@frames[["HD-NK1 + HD-MSC4 AMO +Molm 1%_HD-NEWP57P6_NK98198.fcs"]]@exprs
# Plot by FSC-A and SSC-A
heatscatter(fcs.exp[, "FSC-A"],
fcs.exp[, "SSC-A"],
cexplot = 0.3, main = "Raw FCS data",
xlab = "FSC-A", ylab = "SSC-A",
xlim = c(0, 2.5E5), ylim = c(0, 2.5E5))
library(CytoTree)
# Plot by FSC-A and SSC-A
heatscatter(fcs.exp[, "FSC-A"],
fcs.exp[, "SSC-A"],
cexplot = 0.3, main = "Raw FCS data",
xlab = "FSC-A", ylab = "SSC-A",
xlim = c(0, 2.5E5), ylim = c(0, 2.5E5))
?heatscatter
library(LSD)
# Plot by FSC-A and SSC-A
heatscatter(fcs.exp[, "FSC-A"],
fcs.exp[, "SSC-A"],
cexplot = 0.3, main = "Raw FCS data",
xlab = "FSC-A", ylab = "SSC-A",
xlim = c(0, 2.5E5), ylim = c(0, 2.5E5))
View(fcs.exp)
# Plot by FSC-A and SSC-A
heatscatter(fcs.exp[, "FSC-A"],
fcs.exp[, "SSC-A"],
cexplot = 0.3, main = "Raw FCS data",
xlab = "FSC-A", ylab = "SSC-A")
View(fcs_transform)
fcs_transform@frames[["HD-NK1 + HD-MSC4 AMO +Molm 1%_HD-NEWP57P6_NK98198.fcs"]]@parameters@data[["desc"]]
View(md)
